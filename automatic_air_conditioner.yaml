blueprint:
  name: Automatic air conditioner for winter and summer, monitoring presence, window status, water level and time slot.
  description:
    "`- Version: 1.0 -`\n\n This blueprint is for using the air conditioner automatically in both winter and summer, based on a start and end temperature.

    Optionally, you can enable:

    - Window status check

    - Water level control in the tank

    - Home presence control

    - Notifications (English)

    - Decide on the time slot for operation"

  domain: automation
  input:
    temperature:
      name: Entities temperature
      description: "Select temperature entities to be used."
      selector:
        entity:
          filter:
            - domain: sensor
              device_class: temperature

    climate:
      name: Entities climate
      description: "Select climate entities to be used."
      selector:
        entity:
          domain: climate

    season:
      name: Select season
      description: "Select the season of use."
      default: Summer
      selector:
        select:
          mode: dropdown
          options:
            - Summer
            - Winter

    set_temperature_climate:
      name: Set temperature climate
      default: 25
      description: "Select the temperature to be set at climate."
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    hvac_modes:
      name: Hvac modes
      description: "Select the mode to be set to the air conditioner."
      default: dry
      selector:
        select:
          mode: dropdown
          options:
            - heat
            - cool
            - dry
            - fan_only

    fan_modes:
      name: Fan modes
      description: "Select the ventilation speed to be set at the air conditioner."
      default: auto
      selector:
        select:
          mode: dropdown
          options:
            - auto
            - high
            - low
            - mid

    home_modus:
      name: Home modus
      description: "Select an input_select helper used for presence (Home, Night, Away)."
      selector:
        entity:
          domain: input_select

    moisture:
      name: Water level
      default: binary_sensor.moisture_disabled
      description: "Select the binary_sensor used to measure the state of the water container."
      selector:
        entity:
          domain: binary_sensor
          device_class: moisture

    window:
      name: Window
      default: binary_sensor.window_disabled
      description: "Select the binary_sensor used for the window."
      selector:
        entity:
          domain: binary_sensor
          device_class: window

    window_delay:
      name: Window Delay
      default: 120
      description: "Delay the window has to be open to be triggered"
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: s
          mode: slider
          step: 1

    target_temperature_start:
      name: Target temperature start
      default: 25
      description: "Set the startup target temperature."
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    target_temperature_stop:
      name: Target temperature stop
      default: 21
      description: "Set the target temperature for shutdown."
      selector:
        number:
          min: 15
          max: 30
          unit_of_measurement: °C
          mode: slider
          step: 1

    delay_temperature_stop:
      default: 10
      name: Delay temperature stop
      description: "Set the climate shutdown delay since the target temperature has been reached."
      selector:
        number:
          min: 0
          max: 30
          unit_of_measurement: min
          mode: slider
          step: 1

    start_time:
      name: Start time
      default: "00:00:00"
      description: "Set automatic operation start time."
      selector:
        time:

    stop_time:
      name: Stop time
      default: "00:00:00"
      description: "Set automatic operation end time."
      selector:
        time:

    notify_device:
      name: Device to notify push
      default: false
      description: "Device needs to run the official Home Assistant app to receive notifications."
      selector:
        device:
          integration: mobile_app

mode: parallel
variables:
  season: !input season
  target_temperature_start: !input target_temperature_start
  temperature: !input temperature
  climate: !input climate
  target_temperature_stop: !input target_temperature_stop
  window: !input window
  window_delay: !input window_delay
  home_modus: !input home_modus

trigger:
  - platform: state
    entity_id: !input moisture
    from: "off"
    to: "on"
    id: moisture_notify
  - platform: state
    entity_id: !input moisture
    from: "off"
    to: "on"
    for:
      minutes: 5
    id: moisture_climate_off
  - platform: numeric_state
    entity_id: !input temperature
    above: !input target_temperature_start
    id: climate_on
  - platform: numeric_state
    entity_id: !input temperature
    below: !input target_temperature_start
    id: climate_on
  - platform: numeric_state
    entity_id: !input temperature
    below: !input target_temperature_stop
    for:
      minutes: !input delay_temperature_stop
    id: climate_off
  - platform: numeric_state
    entity_id: !input temperature
    above: !input target_temperature_stop
    for:
      minutes: !input delay_temperature_stop
    id: climate_off
  - platform: time
    at: !input stop_time
    id: climate_off
  - platform: time
    at: !input start_time
    id: climate_on
  - platform: state
    entity_id: !input window
    for:
      seconds: !input window_delay
    id: window
  - platform: state
    entity_id: !input home_modus
    id: home_modus

action:
  - alias: Avviso tanica piena
    if:
      - "{{ trigger.id == 'moisture_notify' and not is_state(climate,'off')}}"
    then:
      - domain: mobile_app
        type: notify
        device_id: !input notify_device
        title: "AIR CONDITIONER."
        message: "Air conditioner water discharge container full, automatic shutdown in 5 minutes."

  - alias: Accensione climate
    if:
      - "{{is_state(climate,'off')}}"
      - condition: time
        after: !input start_time
        before: !input stop_time
      - "{{ states(home_modus) in ['Home', 'Night'] }}"
      - or:
          - "{{ (trigger.id == 'climate_on' or trigger.id == 'window' or (trigger.id == 'home_modus' and states(home_modus) in ['Home', 'Night'])) and season == 'Winter' and (states(temperature)|float(0) < target_temperature_start|float(0)) }}"
          - "{{ (trigger.id == 'climate_on' or trigger.id == 'window' or (trigger.id == 'home_modus' and states(home_modus) in ['Home', 'Night'])) and season == 'Summer' and (states(temperature)|float(0) > target_temperature_start|float(0)) }}"
    then:
      - alias: Controllo finestra
        if:
          - "{{ window == 'binary_sensor.window_disabled' or states(window) == 'off'}}"
        then:
          - service: climate.set_temperature
            data:
              entity_id: !input climate
              temperature: !input set_temperature_climate
              hvac_mode: !input hvac_modes
          - delay:
              seconds: 1
          - service: climate.set_fan_mode
            data:
              entity_id: !input climate
              fan_mode: !input fan_modes
          - domain: mobile_app
            type: notify
            device_id: !input notify_device
            title: "AIR CONDITIONER."
            message: "Turn on air conditioner performed — current temperature is {{states(temperature)|float(0)}}°"
        else:
          - domain: mobile_app
            type: notify
            device_id: !input notify_device
            title: "AIR CONDITIONER."
            message: "Turning on air conditioner not performed because the window is open."

  - alias: Spegni climate
    if:
      - "{{ not is_state(climate,'off') }}"
      - or:
          - "{{ trigger.id == 'home_modus' and states(home_modus) == 'Away' }}"
          - "{{ trigger.id == 'climate_off' and season == 'Winter' and (states(temperature)|float(0) > target_temperature_stop|float(0)) }}"
          - "{{ trigger.id == 'climate_off' and season == 'Summer' and (states(temperature)|float(0) < target_temperature_stop|float(0)) }}"
          - "{{ trigger.id == 'climate_off' and trigger.platform == 'time' }}"
          - "{{ trigger.id == 'window' and is_state(window,'on') }}"
          - "{{ trigger.id == 'moisture_climate_off' }}"
    then:
      - service: climate.turn_off
        target:
          entity_id: !input climate
      - domain: mobile_app
        type: notify
        device_id: !input notify_device
        title: "AIR CONDITIONER."
        message: >
          {% if trigger.id == 'window' %}
            Air conditioner turned off because the window was opened.
          {% elif trigger.id in ['climate_off', 'home_modus'] %}
            Automatic air conditioner shutdown.
          {% elif trigger.id == 'moisture_climate_off' %}
            Air conditioner turned off due to full water container.
          {% endif %}
